#include <iostream>
#include <fmt/core.h>
#include <cryptopp/des.h>
#include <cryptopp/base64.h>
#include <chrono>
#include <fmt/chrono.h>
#include <fmt/color.h>

void DES_Decrypt(const char *keyString, CryptoPP::byte *block, size_t length, CryptoPP::byte *out_buffer) {
    CryptoPP::byte key[CryptoPP::DES::KEYLENGTH];
    std::memcpy(key, keyString, CryptoPP::DES::KEYLENGTH);

    auto cipher = std::make_shared<CryptoPP::DESDecryption>(key, CryptoPP::DES::KEYLENGTH);

    int steps = length / cipher->BlockSize();

    for (int i = 0; i < steps; i++) {
        int offset = i * cipher->BlockSize();

        cipher->ProcessBlock(block + offset, out_buffer + offset);
    }
}

std::string to_base64(std::string str) {
    std::string ret;

    CryptoPP::StringSource ss(str, true, new CryptoPP::Base64Encoder(new CryptoPP::StringSink(ret)));

    return ret;
}

std::string from_base64(std::string str) {
    std::string ret;

    CryptoPP::StringSource ss(str, true, new CryptoPP::Base64Decoder(new CryptoPP::StringSink(ret)));

    return ret;
}

int main(int argc, char** argv) {

    std::string cipher_text = "n8VzdXsD3T7Zayr7Fl1j2y5FI0YLdbRF5t0sz5QB6cigZxhzqPZMk3ba6ZQf/U+MTvsSc2vmWAgMdw==";
    const char *txt_to_find = "implementation";

    MPI_Init(&argc, &argv);

    int nprocs, rank_id;

     MPI_Comm_rank(MPI_COMM_WORLD, &rank_id);
     MPI_Comm_size(MPI_COMM_WORLD, &nprocs);


    long long block_size = LLONG_MAX / nprocs;
    long long start_index = rank_id * block_size;
    long long end_index = (rank_id + 1) * block_size;
    long long key_found = 0;

    if(rank_id==3){
         start_index= 7523094288207667809-10;
    }

    fmt::print(fmt::emphasis::bold | fg(fmt::color::aqua), "rank {} checkin from {} to {}\n", thread_id,
                               start_index, end_index);

    MPI_Request req;
    MPI_Status st;

    MPI_Irecv(&key_found, 1; MPI_LONG, MPI_ANY_SOURCE,MPI_ANY_TAG, MPI_COMM_WORLD, &req);

    std::string text = from_base64(cipher_text);
    int clen = text.size();
    CryptoPP::byte *ptr = (CryptoPP::byte * )text.c_str();
    std::vector<CryptoPP::byte> out_buffer(clen, 0);

    long long test_key;
    int flag,cc;

    for (test_key = start_index; test_key < end_index && !key_found; test_key++) {
            DES_Decrypt((char *) &test_key,ptr,
                        clen,
                        out_buffer.data());

            if(std::strstr((char*  )out_buffer.data(), txt_to_find)){
                key_found = test_key;

                char ffkey[9];
                std::memcpy(ffkey,(char *) & test_key, 8);
                ffkey[8]=0;

                fmt::println("----------------------------------------------------------------");
                fmt::print(fmt::emphasis::bold | fg(fmt::color::green_yellow),"Found: rank_id: {}\n", rank_id);

                for(int node=0; node<nprocs;node++){
                    MPI_Send(&key_found, 1,MPI_LONG, node, 0, MPI_COMM_WORLD);
                }
            }

            if(++cc % 1000 ==0){
                MPI_Test(&req, &flag, &st);
                if(flag){
                    fmt::print(fmt::emphasis::bold | fg(fmt::color::green_yellow),"recv rank {} desde rank_id: {}\n", rank_id, st.MPI_SOURCE);
                    break;
                }
            }
        }

    MPI_Barrier(MPI_COMM_WORLD);

    if(rank_id==0){
        MPI_Wait(&req,&st);
        DES_Decrypt((char *) &test_key,ptr,clen,out_buffer.data());

        char ffkey[9];
        std::memcpy(ffkey,(char *) & test_key, 8);
        ffkey[8]=0;

        fmt::println("----------------------------------------------------------------");
        fmt::print(fmt::emphasis::bold | fg(fmt::color::green_yellow), "****** key found: {}\n", ffkey);
        fmt::print(fmt::emphasis::bold | fg(fmt::color::green_yellow), "****** org text: {}\n", (char* )out_buffer.data());
        break;
    }

    MPI_Finalize();
}

CMAKE.txt
cmake_minimum_required(VERSION 3.25)
project(lab02-1)

set(CMAKE_CXX_STANDARD 17)

include(cmake/CPM.cmake)

#https://github.com/fmtlib/fmt.git
CPMAddPackage("gh:fmtlib/fmt#10.0.0")

#https://github.com/abdes/cryptopp-cmake.git
CPMAddPackage("gh:abdes/cryptopp-cmake#v8.8.0")
find_package(MPI REQUIRED)

add_executable(lab02 main.cpp)
target_link_libraries(lab02 fmt::fmt cryptopp MPI::MPI_CXX)
